import java.util.*;

public class EulerAlgos {
    // Problem # 1
    // If we list all the natural numbers below 10 that are multiples of 3 or 5, we
    // get 3, 5, 6 and 9.
    // The sum of these multiples is 23.
    // Find the sum of all the multiples of 3 or 5 below 1000.

    // Solution steps: create a while-loop that multiplies the given number by
    // incremental numbers as long as the result is less than 10
    public int multiples(int num) {
        int sum = 0;
        int check = 0;
        int count = 1;
        while (sum < 1000) {
            check += (count * num);
            if (check > 1000) {
                return sum;
            } else {
                sum += (count * num);
            }
            count++;
        }
        return sum;
    }

    // Problem # 2
//     Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...  
// By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

    // Solution steps:
    public void fibonacciNum(int num) {
        int i = 0;
        int j = 1;
        int k = 2;
        int sum = 0;
        int fib = 2;
        int prev = 1;
        int temp = 0;
        List<Integer> list = new ArrayList<>();
        list.add(prev);
        list.add(fib);
        while (i < num - 2) {
            temp = fib;
            fib += prev;
            prev = temp;
            list.add(fib);
            i++;
        }
        for (int x = 0; x < list.size(); ++x) {
            if (list.get(x) % 2 == 0) {
                sum += list.get(x);
            }
        }
        System.out.println("The Fibonacci numbers are: " + list);
        System.out.println("The sum of the even Fibonacci numbers is: " + sum);

    }

    public static void main(String[] args) {
        EulerAlgos algos = new EulerAlgos();
        System.out.println(algos.multiples(5));
        algos.fibonacciNum(10);
    }
}