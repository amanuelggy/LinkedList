import java.util.*;

public class EulerAlgos {
    // Problem # 1
    // If we list all the natural numbers below 10 that are multiples of 3 or 5, we
    // get 3, 5, 6 and 9.
    // The sum of these multiples is 23.
    // Find the sum of all the multiples of 3 or 5 below 1000.

    // Solution steps: create a while-loop that multiplies the given number by
    // incremental numbers as long as the result is less than 10
    public int multiples(int num) {
        int sum = 0;
        int check = 0;
        int count = 1;
        while (sum < 1000) {
            check += (count * num);
            if (check > 1000) {
                return sum;
            } else {
                sum += (count * num);
            }
            count++;
        }
        return sum;
    }

    // Problem # 2
//     Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...  
// By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

    // Solution steps:
    public void fibonacciNum(int num) {
        int i = 0;
        int j = 1;
        int k = 2;
        int sum = 0;
        int fib = 2;
        int prev = 1;
        int temp = 0;
        List<Integer> list = new ArrayList<>();
        list.add(prev);
        list.add(fib);
        while (i < num - 2) {
            temp = fib;
            fib += prev;
            prev = temp;
            list.add(fib);
            i++;
        }
        for (int x = 0; x < list.size(); ++x) {
            if (list.get(x) % 2 == 0) {
                sum += list.get(x);
            }
        }
        System.out.println("The Fibonacci numbers are: " + list);
        System.out.println("The sum of the even Fibonacci numbers is: " + sum);

    }
    // Probrlem #5
    // Title: Smallest Multiple
    // 2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
    // What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?

    //Solution:
    public int smallestMultiple(int start, int num1, int num2) {
        int k = start;
        int count = 0;
        while(true) {
            for(int i = num1; i <= num2; ++i) {
                if (k % i == 0) {
                    count++;
                } else {
                    count = 0;
                    break;
                }
            }
            
            if (count == num2) {
                System.out.println("The Smallest Multiple number is: " + k);
                return k;
            }
            
            if (k == 1000000) {
                System.out.println("Sorry we couln't find smallest multiple below 1 Million");
            }
            k++;
        }
    }
    // Problem #6
    //The sum of the squares of the first ten natural numbers is,
    // 12 + 22 + ... + 102 = 385
    // The square of the sum of the first ten natural numbers is,
    // (1 + 2 + ... + 10)2 = 552 = 3025
    // Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 âˆ’ 385 = 2640.
    // Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.

    public int sumOfSqr(int num) {
        int sumEachSqr = 0;
        int singleSqr = 0;
        int result = 0;

        for(int i = 1; i <= num; ++i) {
            sumEachSqr += (i * i);
            singleSqr += i;
            if (i === num) {
                singleSqr *= singleSqr;
            }
        }
        result = singleSqr - sumEachSqr;
        System.out.println("The difference between the sum of the squares is: " + result);
        return result;
    }
    public static void main(String[] args) {
        EulerAlgos algos = new EulerAlgos();
        System.out.println(algos.multiples(5));
        algos.fibonacciNum(10);
        algos.smallestMultiple(2300, 1, 20);
    }
}